//------------------------------------------------------------------------------
// <copyright file="MainWindow.xaml.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
namespace Microsoft.Samples.Kinect.BodyBasics
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Globalization;
    using System.IO;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;
    using Microsoft.Kinect;

    /// <summary>
    /// Interaction logic for MainWindow
    /// </summary>
    public partial class MainWindow : Window, INotifyPropertyChanged
    {
        /// <summary>
        /// Radius of drawn hand circles
        /// </summary>
        private const double HandSize = 30;

        byte[] sendHexData = { 0xFB, 0XBF, 0X17, 0X23, 0X6A, 0X48, 0X59, 0X5A, 0X5B, 0X5A, 0X58, 0X3D, 0X4B, 0X6B, 0X5B, 0X58, 0X76, 0X68, 0X46, 0X5A, 0X23, 0X0a, 0XE4, 0XED };

        float shoulder_r_x = 0, shoulder_r_y = 0,shoulder_r_z=0;
        float shoulder_l_x = 0, shoulder_l_y = 0,shoulder_l_z=0;
        float elbow_r_x = 0, elbow_r_y = 0,elbow_r_z=0;
        float elbow_l_x = 0, elbow_l_y = 0, elbow_l_z=0;
        float wrist_l_x = 0, wrist_l_y = 0;
        float wrist_r_x = 0, wrist_r_y = 0;
        float hip_r_y = 0;
        float knee_r_y = 0;
        float R1 = 0, R2 = 0, R3 = 0, R4 = 0, R5 = 0,R6=0,R7=0;
        double r1 = 0,r2=0,r3=0,r4=0,r5=0,r6=0;
        double a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 0,a6=0;
        uint i1s = 0,i2s=0,i3s=0,i4s=0,i5s=0,i6s=0,i7s=0;
        uint data = 0;
       
        /// <summary>
        /// Thickness of drawn joint lines
        /// </summary>
        private const double JointThickness = 3;

        /// <summary>
        /// Thickness of clip edge rectangles
        /// </summary>
        private const double ClipBoundsThickness = 10;

        /// <summary>
        /// Constant for clamping Z values of camera space points from being negative
        /// </summary>
        private const float InferredZPositionClamp = 0.1f;

        /// <summary>
        /// Brush used for drawing hands that are currently tracked as closed
        /// </summary>
        private readonly Brush handClosedBrush = new SolidColorBrush(Color.FromArgb(128, 255, 0, 0));

        /// <summary>
        /// Brush used for drawing hands that are currently tracked as opened
        /// </summary>
        private readonly Brush handOpenBrush = new SolidColorBrush(Color.FromArgb(128, 0, 255, 0));

        /// <summary>
        /// Brush used for drawing hands that are currently tracked as in lasso (pointer) position
        /// </summary>
        private readonly Brush handLassoBrush = new SolidColorBrush(Color.FromArgb(128, 0, 0, 255));

        /// <summary>
        /// Brush used for drawing joints that are currently tracked
        /// </summary>
        private readonly Brush trackedJointBrush = new SolidColorBrush(Color.FromArgb(255, 68, 192, 68));

        /// <summary>
        /// Brush used for drawing joints that are currently inferred
        /// </summary>        
        private readonly Brush inferredJointBrush = Brushes.Yellow;

        /// <summary>
        /// Pen used for drawing bones that are currently inferred
        /// </summary>        
        private readonly Pen inferredBonePen = new Pen(Brushes.Gray, 1);

        /// <summary>
        /// Drawing group for body rendering output
        /// </summary>
        private DrawingGroup drawingGroup;

        /// <summary>
        /// Drawing image that we will display
        /// </summary>
        private DrawingImage imageSource;

        /// <summary>
        /// Active Kinect sensor
        /// </summary>
        private KinectSensor kinectSensor = null;

        /// <summary>
        /// Coordinate mapper to map one type of point to another
        /// </summary>
        private CoordinateMapper coordinateMapper = null;

        /// <summary>
        /// Reader for body frames
        /// </summary>
        private BodyFrameReader bodyFrameReader = null;

        /// <summary>
        /// Array for the bodies
        /// </summary>
        private Body[] bodies = null;

        /// <summary>
        /// definition of bones
        /// </summary>
        private List<Tuple<JointType, JointType>> bones;

        /// <summary>
        /// Width of display (depth space)
        /// </summary>
        private int displayWidth;

        /// <summary>
        /// Height of display (depth space)
        /// </summary>
        private int displayHeight;

        /// <summary>
        /// List of colors for each body tracked
        /// </summary>
        private List<Pen> bodyColors;

        /// <summary>
        /// Current status text to display
        /// </summary>
        private string statusText = null;

        /// <summary>
        /// Initializes a new instance of the MainWindow class.
        /// </summary>
        public MainWindow()
        {
            // one sensor is currently supported
            this.kinectSensor = KinectSensor.GetDefault();

            // get the coordinate mapper
            this.coordinateMapper = this.kinectSensor.CoordinateMapper;

            // get the depth (display) extents
            FrameDescription frameDescription = this.kinectSensor.DepthFrameSource.FrameDescription;

            // get size of joint space
            this.displayWidth = frameDescription.Width;
            this.displayHeight = frameDescription.Height;

            // open the reader for the body frames
            this.bodyFrameReader = this.kinectSensor.BodyFrameSource.OpenReader();

            // a bone defined as a line between two joints
            this.bones = new List<Tuple<JointType, JointType>>();

            // Torso
            this.bones.Add(new Tuple<JointType, JointType>(JointType.Head, JointType.Neck));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.Neck, JointType.SpineShoulder));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.SpineShoulder, JointType.SpineMid));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.SpineMid, JointType.SpineBase));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.SpineShoulder, JointType.ShoulderRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.SpineShoulder, JointType.ShoulderLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.SpineBase, JointType.HipRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.SpineBase, JointType.HipLeft));

            // Right Arm
            this.bones.Add(new Tuple<JointType, JointType>(JointType.ShoulderRight, JointType.ElbowRight));

            
            this.bones.Add(new Tuple<JointType, JointType>(JointType.ElbowRight, JointType.WristRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.WristRight, JointType.HandRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.HandRight, JointType.HandTipRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.WristRight, JointType.ThumbRight));

            // Left Arm
            this.bones.Add(new Tuple<JointType, JointType>(JointType.ShoulderLeft, JointType.ElbowLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.ElbowLeft, JointType.WristLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.WristLeft, JointType.HandLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.HandLeft, JointType.HandTipLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.WristLeft, JointType.ThumbLeft));

            // Right Leg
            this.bones.Add(new Tuple<JointType, JointType>(JointType.HipRight, JointType.KneeRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.KneeRight, JointType.AnkleRight));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.AnkleRight, JointType.FootRight));

            // Left Leg
            this.bones.Add(new Tuple<JointType, JointType>(JointType.HipLeft, JointType.KneeLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.KneeLeft, JointType.AnkleLeft));
            this.bones.Add(new Tuple<JointType, JointType>(JointType.AnkleLeft, JointType.FootLeft));

            // populate body colors, one for each BodyIndex
            this.bodyColors = new List<Pen>();

            this.bodyColors.Add(new Pen(Brushes.Red, 6));
            this.bodyColors.Add(new Pen(Brushes.Orange, 6));
            this.bodyColors.Add(new Pen(Brushes.Green, 6));
            this.bodyColors.Add(new Pen(Brushes.Blue, 6));
            this.bodyColors.Add(new Pen(Brushes.Indigo, 6));
            this.bodyColors.Add(new Pen(Brushes.Violet, 6));

            // set IsAvailableChanged event notifier
            this.kinectSensor.IsAvailableChanged += this.Sensor_IsAvailableChanged;

            // open the sensor
            this.kinectSensor.Open();

            // set the status text
            this.StatusText = this.kinectSensor.IsAvailable ? Properties.Resources.RunningStatusText
                                                            : Properties.Resources.NoSensorStatusText;

            // Create the drawing group we'll use for drawing
            this.drawingGroup = new DrawingGroup();

            // Create an image source that we can use in our image control
            this.imageSource = new DrawingImage(this.drawingGroup);

            // use the window object as the view model in this simple example
            this.DataContext = this;

            // initialize the components (controls) of the window
            this.InitializeComponent();

            OpenSerialPort();
            //btSend_Event();
        }

        /// <summary>
        /// INotifyPropertyChangedPropertyChanged event to allow window controls to bind to changeable data
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Gets the bitmap to display
        /// </summary>
        public ImageSource ImageSource
        {
            get
            {
                return this.imageSource;
            }
        }

        /// <summary>
        /// Gets or sets the current status text to display
        /// </summary>
        public string StatusText
        {
            get
            {
                return this.statusText;
            }

            set
            {
                if (this.statusText != value)
                {
                    this.statusText = value;

                    // notify any bound elements that the text has changed
                    if (this.PropertyChanged != null)
                    {
                        this.PropertyChanged(this, new PropertyChangedEventArgs("StatusText"));
                    }
                }
            }
        }

        /// <summary>
        /// Execute start up tasks
        /// </summary>
        /// <param name="sender">object sending the event</param>
        /// <param name="e">event arguments</param>
        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            if (this.bodyFrameReader != null)
            {
                this.bodyFrameReader.FrameArrived += this.Reader_FrameArrived;
            }
        }

        /// <summary>
        /// Execute shutdown tasks
        /// </summary>
        /// <param name="sender">object sending the event</param>
        /// <param name="e">event arguments</param>
        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (this.bodyFrameReader != null)
            {
                // BodyFrameReader is IDisposable
                this.bodyFrameReader.Dispose();
                this.bodyFrameReader = null;
            }

            if (this.kinectSensor != null)
            {
                this.kinectSensor.Close();
                this.kinectSensor = null;
            }
        }

        /// <summary>
        /// Handles the body frame data arriving from the sensor
        /// </summary>
        /// <param name="sender">object sending the event</param>
        /// <param name="e">event arguments</param>
        private void Reader_FrameArrived(object sender, BodyFrameArrivedEventArgs e)
        {
            bool dataReceived = false;

            using (BodyFrame bodyFrame = e.FrameReference.AcquireFrame())
            {
                if (bodyFrame != null)
                {
                    if (this.bodies == null)
                    {
                        this.bodies = new Body[bodyFrame.BodyCount];
                    }

                    // The first time GetAndRefreshBodyData is called, Kinect will allocate each Body in the array.
                    // As long as those body objects are not disposed and not set to null in the array,
                    // those body objects will be re-used.
                    bodyFrame.GetAndRefreshBodyData(this.bodies);
                    dataReceived = true;
                }
            }

            if (dataReceived)
            {
                using (DrawingContext dc = this.drawingGroup.Open())
                {
                    // Draw a transparent background to set the render size
                    dc.DrawRectangle(Brushes.Black, null, new Rect(0.0, 0.0, this.displayWidth, this.displayHeight));

                    int penIndex = 0;
                    foreach (Body body in this.bodies)
                    {
                        Pen drawPen = this.bodyColors[penIndex++];

                        if (body.IsTracked)
                        {
                            this.DrawClippedEdges(body, dc);

                            IReadOnlyDictionary<JointType, Joint> joints = body.Joints;
                            Dictionary<JointType, Point> jointPoints = new Dictionary<JointType, Point>();
                            foreach (JointType jointType in joints.Keys)
                            {
                                CameraSpacePoint shoulder_right = joints[JointType.ShoulderRight].Position;
                                CameraSpacePoint elbow_right = joints[JointType.ElbowRight].Position;
                                CameraSpacePoint shoulder_left = joints[JointType.ShoulderLeft].Position;
                                CameraSpacePoint elbow_left = joints[JointType.ElbowLeft].Position;
                                CameraSpacePoint wrist_left = joints[JointType.WristLeft].Position;
                                CameraSpacePoint wrist_right = joints[JointType.WristRight].Position;
                                CameraSpacePoint hip_right = joints[JointType.HipRight].Position;
                                CameraSpacePoint knee_right = joints[JointType.KneeRight].Position;
                               
                                DepthSpacePoint shoulder_right_xy = this.coordinateMapper.MapCameraPointToDepthSpace(shoulder_right);
                                DepthSpacePoint elbow_right_xy = this.coordinateMapper.MapCameraPointToDepthSpace(elbow_right);
                                DepthSpacePoint shoulder_left_xy = this.coordinateMapper.MapCameraPointToDepthSpace(shoulder_left);
                                DepthSpacePoint elbow_left_xy = this.coordinateMapper.MapCameraPointToDepthSpace(elbow_left);
                                DepthSpacePoint wrist_left_xy = this.coordinateMapper.MapCameraPointToDepthSpace(wrist_left);
                                DepthSpacePoint wrist_right_xy = this.coordinateMapper.MapCameraPointToDepthSpace(wrist_right);

                                DepthSpacePoint hip_right_xy = this.coordinateMapper.MapCameraPointToDepthSpace(hip_right);
                                DepthSpacePoint knee_right_xy = this.coordinateMapper.MapCameraPointToDepthSpace(knee_right);

                                shoulder_r_x = shoulder_right_xy.X;
                                shoulder_r_y = shoulder_right_xy.Y;
                                shoulder_r_z = shoulder_right.Z;
                                elbow_r_x = elbow_right_xy.X;
                                elbow_r_y = elbow_right_xy.Y;//2-6
                                elbow_r_z = elbow_right.Z;
                                shoulder_l_x = shoulder_left_xy.X;
                                shoulder_l_y = shoulder_left_xy.Y;
                                shoulder_l_z = shoulder_left.Z;
                                elbow_l_x = elbow_left_xy.X;//4-5
                                elbow_l_y = elbow_left_xy.Y;
                                elbow_l_z = elbow_left.Z;
                                wrist_l_x = wrist_left_xy.X;
                                wrist_l_y = wrist_left_xy.Y;
                                wrist_r_x = wrist_right_xy.X;
                                wrist_r_y = wrist_right_xy.Y;

                                hip_r_y = hip_right_xy.Y;
                                knee_r_y = knee_right_xy.Y;

                                R7 = hip_r_y-326 ;//站立蹲下
                                if (R7 < 11) R7 = 0;
                                i7s = (uint)R7;
                                if (R7 < 3)
                                {
                                  //  TEXT1.Text = R7.ToString();
                                    btSend(61, 11);btSend(75, 12);btSend(107, 13);//28   75  51
                                    btSend(118, 16);btSend(104, 17);btSend(70, 18);//24  76  45 
                                    data = 1;
                                }
                                if (R7 > 5)
                                {
                                //    TEXT1.Text = R7.ToString();
                                    btSend(33, 11);btSend(0, 12);btSend(158, 13);//28   75  51
                                    btSend(152, 16);btSend(180, 17);btSend(25, 18);//24  76  45 
                                    btSend(85, 19);
                                    data = 1;
                                }

                                if (shoulder_r_y <elbow_r_y)//1
                                 {
                                     R5 = (elbow_r_z - shoulder_r_z) / (shoulder_right.Y - elbow_right.Y);
                                     r5 = System.Math.Atan(R5);
                                     a5 = ((r5 / System.Math.PI * 180));
                                     a5 = (int)a5;
                                     a5 += 90;
                                     a5 = 180 - a5;
                                     i5s = (uint)a5;
                                     btSend(i5s, 7);
                                     data = 1;

                                 }
                                 if (shoulder_l_y < elbow_l_y)//4
                                 {
                                     R6 = (elbow_l_z - shoulder_l_z) / (shoulder_left.Y - elbow_left.Y);
                                     r6 = System.Math.Atan(R6);
                                     a6 = ((r6 / System.Math.PI * 180));
                                     a6 = (int)a6;
                                     a6 += 90;
                                     //a6 = 180 - a6;
                                     i6s = (uint)a6;
                                     btSend(i6s, 4);
                                     data = 1;
                                 }
                                
                                 if (elbow_r_x >shoulder_r_x)//2
                                 {
                                     R1 = (elbow_r_x - shoulder_r_x)/ (elbow_r_y - shoulder_r_y);
                                     r1 = System.Math.Atan(R1);
                                    a1 = (r1 / System.Math.PI * 180);
                                    if (a1 < 0) a1 = 90 + (90 + a1);
                                    // a1 = 180-((r1 / System.Math.PI * 180) + 90);
                                    //if (a1 > 179) a1 = 179;
                                    a1 = 180 - a1;
                                    if (a1 < 15) a1 = 0;
                                    i1s = (uint)a1;
                                     btSend(i1s, 8);
                                     data = 1;
                                 }
                                 if(wrist_r_x> elbow_r_x)//3
                                 {
                                     R4 = (wrist_r_y-elbow_r_y) / (wrist_r_x-elbow_r_x);
                                     r4 = System.Math.Atan(R4);
                                     a4 = 180 - ((r4 / System.Math.PI * 180) + 90);
                                     a4 += a1 - 90;
                                     a4 = 180 - a4;
                                     if (a4 > 179) a4 = 179;
                                     if (a4 < 1) a4 = 1;
                                     i4s = (uint)a4;
                                     btSend(i4s, 9);
                                     data = 1;
                                 }
                                 if (shoulder_l_x > elbow_l_x)//5
                                 {
                                     R2 =(elbow_l_x-shoulder_l_x)/ (elbow_l_y - shoulder_l_y);
                                     r2 = System.Math.Atan(R2);
                                     a2 = (r2 / System.Math.PI * 180);
                                     if (a2 < 0) a2 = 90 + (90 + a2);
                                    //a2 =180-((r2 / System.Math.PI * 180) + 90);
                                    a2 = 180 - a2;
                                     if (a2 > 173) a2 = 180;
                                     //if (a2 < 1) a2 = 1;
                                     i2s = (uint)a2;
                                     btSend(i2s, 5);
                                     data = 1;
                                    TEXT1.Text =i1s.ToString() + "   " + i2s.ToString();
                                }
                                 if (elbow_l_x > wrist_l_x)//6
                                 {
                                     R3 = (elbow_l_y - wrist_l_y) / (elbow_l_x - wrist_l_x);
                                     r3 = System.Math.Atan(R3);
                                     a3 = 180 - ((r3 / System.Math.PI * 180) + 90);
                                     a3 += a2 - 90;
                                     a3 = 180 - a3;
                                     if (a3 > 179) a3 = 179;
                                     if (a3 < 1) a3 = 1;
                                     i3s = (uint)a3;

                                     btSend(i3s, 6);
                                     data = 1;
                                 }

                                if (data == 1) { btSend_Event(); data = 0; }
                                CameraSpacePoint g1 = joints[jointType].Position;
                                DepthSpacePoint depthSpacePoint = this.coordinateMapper.MapCameraPointToDepthSpace(g1);
                                jointPoints[jointType] = new Point(depthSpacePoint.X, depthSpacePoint.Y);
                            }
                            this.DrawBody(joints, jointPoints, dc, drawPen);
                            this.DrawHand(body.HandLeftState, jointPoints[JointType.HandLeft], dc);
                            this.DrawHand(body.HandRightState, jointPoints[JointType.HandRight], dc);
                        }
                    }

                    // prevent drawing outside of our render area
                    this.drawingGroup.ClipGeometry = new RectangleGeometry(new Rect(0.0, 0.0, this.displayWidth, this.displayHeight));
                }
            }
        }

        /// <summary>
        /// Draws a body
        /// </summary>
        /// <param name="joints">joints to draw</param>
        /// <param name="jointPoints">translated positions of joints to draw</param>
        /// <param name="drawingContext">drawing context to draw to</param>
        /// <param name="drawingPen">specifies color to draw a specific body</param>
        private void DrawBody(IReadOnlyDictionary<JointType, Joint> joints, IDictionary<JointType, Point> jointPoints, DrawingContext drawingContext, Pen drawingPen)
        {
            // Draw the bones
            foreach (var bone in this.bones)
            {
                this.DrawBone(joints, jointPoints, bone.Item1, bone.Item2, drawingContext, drawingPen);
            }

            // Draw the joints
            foreach (JointType jointType in joints.Keys)
            {
                Brush drawBrush = null;

                TrackingState trackingState = joints[jointType].TrackingState;

                if (trackingState == TrackingState.Tracked)
                {
                    drawBrush = this.trackedJointBrush;
                }
                else if (trackingState == TrackingState.Inferred)
                {
                    drawBrush = this.inferredJointBrush;
                }

                if (drawBrush != null)
                {
                    drawingContext.DrawEllipse(drawBrush, null, jointPoints[jointType], JointThickness, JointThickness);
                }
            }
        }

        /// <summary>
        /// Draws one bone of a body (joint to joint)
        /// </summary>
        /// <param name="joints">joints to draw</param>
        /// <param name="jointPoints">translated positions of joints to draw</param>
        /// <param name="jointType0">first joint of bone to draw</param>
        /// <param name="jointType1">second joint of bone to draw</param>
        /// <param name="drawingContext">drawing context to draw to</param>
        /// /// <param name="drawingPen">specifies color to draw a specific bone</param>
        private void DrawBone(IReadOnlyDictionary<JointType, Joint> joints, IDictionary<JointType, Point> jointPoints, JointType jointType0, JointType jointType1, DrawingContext drawingContext, Pen drawingPen)
        {
            Joint joint0 = joints[jointType0];
            Joint joint1 = joints[jointType1];

            // If we can't find either of these joints, exit
            if (joint0.TrackingState == TrackingState.NotTracked ||
                joint1.TrackingState == TrackingState.NotTracked)
            {
                return;
            }

            // We assume all drawn bones are inferred unless BOTH joints are tracked
            Pen drawPen = this.inferredBonePen;
            if ((joint0.TrackingState == TrackingState.Tracked) && (joint1.TrackingState == TrackingState.Tracked))
            {
                drawPen = drawingPen;
            }

            drawingContext.DrawLine(drawPen, jointPoints[jointType0], jointPoints[jointType1]);
        }

        /// <summary>
        /// Draws a hand symbol if the hand is tracked: red circle = closed, green circle = opened; blue circle = lasso
        /// </summary>
        /// <param name="handState">state of the hand</param>
        /// <param name="handPosition">position of the hand</param>
        /// <param name="drawingContext">drawing context to draw to</param>
        private void DrawHand(HandState handState, Point handPosition, DrawingContext drawingContext)
        {
            switch (handState)
            {
                case HandState.Closed:
                    drawingContext.DrawEllipse(this.handClosedBrush, null, handPosition, HandSize, HandSize);
                    break;

                case HandState.Open:
                    drawingContext.DrawEllipse(this.handOpenBrush, null, handPosition, HandSize, HandSize);
                    break;

                case HandState.Lasso:
                    drawingContext.DrawEllipse(this.handLassoBrush, null, handPosition, HandSize, HandSize);
                    break;
            }
        }

        /// <summary>
        /// Draws indicators to show which edges are clipping body data
        /// </summary>
        /// <param name="body">body to draw clipping information for</param>
        /// <param name="drawingContext">drawing context to draw to</param>
        private void DrawClippedEdges(Body body, DrawingContext drawingContext)
        {
            FrameEdges clippedEdges = body.ClippedEdges;

            if (clippedEdges.HasFlag(FrameEdges.Bottom))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(0, this.displayHeight - ClipBoundsThickness, this.displayWidth, ClipBoundsThickness));
            }

            if (clippedEdges.HasFlag(FrameEdges.Top))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(0, 0, this.displayWidth, ClipBoundsThickness));
            }

            if (clippedEdges.HasFlag(FrameEdges.Left))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(0, 0, ClipBoundsThickness, this.displayHeight));
            }

            if (clippedEdges.HasFlag(FrameEdges.Right))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(this.displayWidth - ClipBoundsThickness, 0, ClipBoundsThickness, this.displayHeight));
            }
        }

        /// <summary>
        /// Handles the event which the sensor becomes unavailable (E.g. paused, closed, unplugged).
        /// </summary>
        /// <param name="sender">object sending the event</param>
        /// <param name="e">event arguments</param>
        private void Sensor_IsAvailableChanged(object sender, IsAvailableChangedEventArgs e)
        {
            // on failure, set the status text
            this.StatusText = this.kinectSensor.IsAvailable ? Properties.Resources.RunningStatusText
                                                            : Properties.Resources.SensorNotAvailableStatusText;
        }
       
        delegate void HanderInterfaceUpdataDelegate(string mySendData);
        HanderInterfaceUpdataDelegate myUpdataHander;
        delegate void txtGotoEndDelegate();

        SerialPort mySerialPort = new SerialPort();
        string[] portsName = SerialPort.GetPortNames();
        //串口关闭标志
        bool serialportIsClosing;
        private void OpenSerialPort()
        {
            if (mySerialPort.IsOpen)
            {
                mySerialPort.Close();
            }
            else
            {
                if (portsName.Length > 0)
                {
                    Array.Sort(portsName);
                    mySerialPort.PortName = "COM3";
                    mySerialPort.DataBits = 8;
                    mySerialPort.BaudRate = 38400;
                    mySerialPort.Parity = Parity.None;
                    mySerialPort.StopBits = StopBits.One;
                    try
                    {
                        mySerialPort.Open();
                    }

                    catch
                    {
                        MessageBox.Show("串口被占用！");
                        return;
                    }
                }
                else
                {
                    MessageBox.Show("没有找到串口");
                }
            }
        }
        private void CloseSerialPort()
        {
            serialportIsClosing = true;
            //serialportIsClosing为true后，mySerialPort_DataReceived就不会在接收数据
            //等待个20毫秒，以确保不再接收，在关闭串口
            //否则，如果频繁点击打开/关闭 串口还在接收数据就关闭串口会出现界面卡死
            Thread.Sleep(10);
            if (mySerialPort.IsOpen)
            {
                mySerialPort.Close();

            }
            else
            {
                MessageBox.Show("串口已关闭");
            }
        }
        private void btSend(uint i3,uint i4)
        {
            
            byte[] B = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0X0B, 0X0C, 0X0D, 0X0E, 0X0F };
            byte sdata = 0;
            int s = 0, s2 = 0;
            sdata = B[(i3 >> 4) & 0x0f];
            sdata <<= 4;
            sdata |= B[(i3 & 0x0f)];
            sendHexData[i4] = sdata;
            s2 = 0;
            for (s = 2; s < 22; s++)
            {
                s2 += sendHexData[s];
            }
            sdata = B[(s2 >> 4) & 0x0f];
            sdata <<= 4;
            sdata |= B[(s2 & 0x0f)];
            sendHexData[22] = sdata;
            
        }
        private void btSend_Event()
        {
            if (mySerialPort.IsOpen)
            {
                mySerialPort.Write(sendHexData, 0, sendHexData.Length);
            }
            else
            {
                MessageBox.Show("串口没有打开，请检查！");
            }
        }
    }
}
